"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([[88007],{88007:(e,s,r)=>{r.r(s),r.d(s,{default:()=>i});var t=r(47817),o=r(88768);r(58574),r(68700),r(7835);const i=class{async decode(e){const s=await(0,o.T)(e.data,e.options);return s&&s.toJSON()}symbolize(e){e.pixelBlock=o.u.fromJSON(e.pixelBlock),e.extent=e.extent?t.M.fromJSON(e.extent):null;const s=this.symbolizer.symbolize(e);return Promise.resolve(s&&s.toJSON())}async updateSymbolizer(e){var s;this.symbolizer=o.N.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(s=this.symbolizer)?void 0:s.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(o.u.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=(0,o.r)(o.u.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=(0,o.U)(o.u.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new o.u(e):null)),r=(0,o.p)(s,e.srcMosaicSize);if(!e.coefs)return r&&r.toJSON();const t=(0,o.C)(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return t&&t.toJSON()}}}}]);